import streamlit as st
import pandas as pd
import datetime
import os
from io import BytesIO

st.set_page_config(page_title="Nut Sorting Process", layout="wide")
st.title("üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô Sorting ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡πä‡∏≠‡∏ï")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
REPORT_FILE = "sorting_report.xlsx"
EMP_FILE = "employee_list.xlsx"
PART_FILE = "part_code_list.xlsx"

# ‡πÇ‡∏´‡∏•‡∏î/‡∏à‡∏≥‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
if EMP_FILE in os.listdir():
    employee_df = pd.read_excel(EMP_FILE)
else:
    employee_df = pd.read_excel("/mnt/data/‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å Final Inspection.xlsx")
    employee_df.to_excel(EMP_FILE, index=False)

if PART_FILE in os.listdir():
    part_df = pd.read_excel(PART_FILE)
else:
    part_df = pd.read_excel("/mnt/data/Master list SCS part name.xlsx")
    part_df.to_excel(PART_FILE, index=False)

# ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
if os.path.exists(REPORT_FILE):
    report_df = pd.read_excel(REPORT_FILE)
else:
    report_df = pd.DataFrame()

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID =====
def generate_job_id():
    now = datetime.datetime.now()
    prefix = now.strftime("%y%m")  # ‡πÄ‡∏ä‡πà‡∏ô 2505
    if not report_df.empty and 'Job ID' in report_df.columns:
        report_df['Job ID'] = report_df['Job ID'].astype(str)
        existing = report_df[report_df['Job ID'].str.startswith(prefix)]
        if not existing.empty:
            last_seq = max([int(jid[-4:]) for jid in existing['Job ID'] if jid[-4:].isdigit()])
        else:
            last_seq = 0
    else:
        last_seq = 0
    return f"{prefix}{last_seq + 1:04d}"

# ====== Sidebar: Upload ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ======
st.sidebar.header("üìÇ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà")
emp_upload = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (Excel)", type="xlsx")
if emp_upload:
    df = pd.read_excel(emp_upload)
    if '‡∏ä‡∏∑‡πà‡∏≠' in df.columns:
        df.to_excel(EMP_FILE, index=False)
        st.sidebar.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤")

part_upload = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (Excel)", type="xlsx")
if part_upload:
    df = pd.read_excel(part_upload)
    if '‡∏£‡∏´‡∏±‡∏™' in df.columns:
        df.to_excel(PART_FILE, index=False)
        st.sidebar.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤")

# ====== Main Layout ======
mode = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£", ["Sorting MC", "Waiting Judgement", "Oil Cleaning"])

if mode == "Sorting MC":
    with st.form("sorting_form"):
        job_id = generate_job_id()
        st.markdown(f"### üÜî Job ID: `{job_id}`")
        date = st.date_input("üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=datetime.date.today())
        employee = st.selectbox("üë∑‚Äç‚ôÇÔ∏è ‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", employee_df['‡∏ä‡∏∑‡πà‡∏≠'].dropna().unique())
        part_code = st.selectbox("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_df['‡∏£‡∏´‡∏±‡∏™'].dropna().unique())
        qty_checked = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        qty_ng = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
        qty_pending = st.number_input("‚è≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        status = st.selectbox("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô", ["‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à"])
        submitted = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        if submitted:
            new_row = pd.DataFrame([{
                "Job ID": job_id,
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": date,
                "‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö": employee,
                "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part_code,
                "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß": qty_checked,
                "NG": qty_ng,
                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_pending,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status,
                "‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å": datetime.datetime.now(),
            }])
            report_df = pd.concat([report_df, new_row], ignore_index=True)
            report_df.to_excel(REPORT_FILE, index=False)
            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {job_id}")

elif mode == "Waiting Judgement":
    st.markdown("## üîç ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à (Rework / Scrap)")
    waiting_df = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == '‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à'] if not report_df.empty else pd.DataFrame()
    for _, row in waiting_df.iterrows():
        col1, col2, col3 = st.columns([3, 2, 3])
        with col1:
            st.write(f"**Job ID:** {row['Job ID']} | **‡∏£‡∏´‡∏±‡∏™:** {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} | **NG:** {row['NG']}")
        with col2:
            judgement_by = st.selectbox(f"‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÇ‡∏î‡∏¢ ({row['Job ID']})", employee_df['‡∏ä‡∏∑‡πà‡∏≠'], key=row['Job ID'])
        with col3:
            colA, colB = st.columns(2)
            if colA.button("üîÅ Rework", key="rework_"+row['Job ID']):
                report_df.loc[report_df['Job ID'] == row['Job ID'], '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Oil Cleaning'
                report_df.loc[report_df['Job ID'] == row['Job ID'], 'Judgement By'] = judgement_by
                report_df.to_excel(REPORT_FILE, index=False)
                st.experimental_rerun()
            if colB.button("üóëÔ∏è Scrap", key="scrap_"+row['Job ID']):
                report_df.loc[report_df['Job ID'] == row['Job ID'], '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Scrap'
                report_df.loc[report_df['Job ID'] == row['Job ID'], 'Judgement By'] = judgement_by
                report_df.to_excel(REPORT_FILE, index=False)
                st.experimental_rerun()

elif mode == "Oil Cleaning":
    st.markdown("## üßº ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á")
    oil_df = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == 'Oil Cleaning'] if not report_df.empty else pd.DataFrame()
    for _, row in oil_df.iterrows():
        col1, col2 = st.columns([6, 2])
        with col1:
            st.write(f"**Job ID:** {row['Job ID']} | **‡∏£‡∏´‡∏±‡∏™:** {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} | **‡∏à‡∏≤‡∏Å:** {row['‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö']}")
        with col2:
            if st.button("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", key="lavage_"+row['Job ID']):
                report_df.loc[report_df['Job ID'] == row['Job ID'], '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Lavage Done'
                report_df.to_excel(REPORT_FILE, index=False)
                st.experimental_rerun()

# ====== ‡πÅ‡∏™‡∏î‡∏á WIP ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ======
st.markdown("## üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô (WIP)")
if not report_df.empty:
    wip_df = report_df[~report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].isin(['Scrap', 'Lavage Done'])]
    st.dataframe(wip_df)

    excel_bytes = BytesIO()
    report_df.to_excel(excel_bytes, index=False)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel", data=excel_bytes.getvalue(), file_name="sorting_report_updated.xlsx")
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö")
