import streamlit as st
import pandas as pd
import os
from datetime import datetime
from io import BytesIO

# ---------- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå ----------
os.makedirs("data", exist_ok=True)
emp_path = "data/employee.xlsx"
part_path = "data/part_codes.xlsx"
report_path = "data/sorting_report.xlsx"

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Master ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ----------
uploaded_emp = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", type=["xlsx"])
if uploaded_emp is not None:
    with open(emp_path, "wb") as f:
        f.write(uploaded_emp.getbuffer())

uploaded_part = st.file_uploader("üìÑ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", type=["xlsx"])
if uploaded_part is not None:
    with open(part_path, "wb") as f:
        f.write(uploaded_part.getbuffer())

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô ----------
if os.path.exists(emp_path):
    df_emp = pd.read_excel(emp_path)
    employees = df_emp.iloc[:, 0].dropna().unique().tolist()
else:
    employees = []

if os.path.exists(part_path):
    df_part = pd.read_excel(part_path)
    part_codes = df_part.iloc[:, 0].dropna().unique().tolist()
else:
    part_codes = []

# ---------- ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà ----------
if os.path.exists(report_path):
    report_df = pd.read_excel(report_path)
else:
    report_df = pd.DataFrame(columns=[
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "Job ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à",
        "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "Judgement ‡πÇ‡∏î‡∏¢"
    ])

# ---------- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID ----------
def generate_job_id():
    now = datetime.now()
    prefix = now.strftime("%y%m")
    if not report_df.empty and report_df['Job ID'].astype(str).str.startswith(prefix).any():
        existing = report_df[report_df['Job ID'].astype(str).str.startswith(prefix)]
        last_seq = max([int(jid[-4:]) for jid in existing['Job ID']])
        next_seq = last_seq + 1
    else:
        next_seq = 1
    return f"{prefix}{next_seq:04d}"

# ---------- ‡∏´‡∏ô‡πâ‡∏≤ UI ‡∏´‡∏•‡∏±‡∏Å ----------
st.title("üìã ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡πä‡∏≠‡∏ï - Sorting Process")
mode = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", ["Sorting MC", "Waiting Judgement", "Oil Cleaning"])

# ---------- Sorting MC ----------
if mode == "Sorting MC":
    st.header("üßæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà")
    with st.form("sorting_form"):
        emp = st.selectbox("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", employees)
        part = st.selectbox("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_codes)
        qty_checked = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", 0)
        qty_ng = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", 0)
        qty_pending = st.number_input("‚è≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", 0)
        status = st.selectbox("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["Waiting Judgement"])
        submit = st.form_submit_button("üì§ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if submit:
            now = datetime.now()
            job_id = generate_job_id()
            new_row = pd.DataFrame([{ 
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": now.date(),
                "‡πÄ‡∏ß‡∏•‡∏≤": now.strftime("%H:%M:%S"),
                "Job ID": job_id,
                "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": emp,
                "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_checked,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG": qty_ng,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_pending,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status,
                "Judgement ‡πÇ‡∏î‡∏¢": ""
            }])
            report_df = pd.concat([report_df, new_row], ignore_index=True)
            report_df.to_excel(report_path, index=False)
            st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß: Job ID {job_id}")

# ---------- Waiting Judgement ----------
elif mode == "Waiting Judgement":
    st.header("üß™ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠ Judgement")
    waiting_df = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "Waiting Judgement"]
    if waiting_df.empty:
        st.info("üéâ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠ Judgement")
    else:
        for idx, row in waiting_df.iterrows():
            st.markdown(f"**üÜî Job ID:** {row['Job ID']} | üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} | ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à']} | ‚ùå NG: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG']}")
            col1, col2, col3 = st.columns([1,1,2])
            with col1:
                if st.button(f"üü• Scrap {row['Job ID']}"):
                    report_df.at[idx, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Scrap'
                    report_df.at[idx, 'Judgement ‡πÇ‡∏î‡∏¢'] = st.selectbox("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", employees, key=f"judge_{idx}")
                    report_df.to_excel(report_path, index=False)
                    st.experimental_rerun()
            with col2:
                if st.button(f"üü© Rework {row['Job ID']}"):
                    report_df.at[idx, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Oil Cleaning'
                    report_df.at[idx, 'Judgement ‡πÇ‡∏î‡∏¢'] = st.selectbox("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", employees, key=f"judge2_{idx}")
                    report_df.to_excel(report_path, index=False)
                    st.experimental_rerun()

# ---------- Oil Cleaning ----------
elif mode == "Oil Cleaning":
    st.header("üßº ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Oil Cleaning")
    oil_df = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "Oil Cleaning"]
    if oil_df.empty:
        st.info("‚ú® ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô Oil Cleaning")
    else:
        for idx, row in oil_df.iterrows():
            st.markdown(f"**üÜî Job ID:** {row['Job ID']} | üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} | üë§ ‡πÇ‡∏î‡∏¢: {row['Judgement ‡πÇ‡∏î‡∏¢']}")
            if st.button(f"‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {row['Job ID']}"):
                report_df.at[idx, '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = 'Cleaned'
                report_df.to_excel(report_path, index=False)
                st.experimental_rerun()

# ---------- WIP ----------
st.header("üì¶ ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (WIP)")
wip_df = report_df[~report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].isin(['Scrap', 'Cleaned'])]
st.dataframe(wip_df)

# ---------- ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô ----------
with BytesIO() as b:
    report_df.to_excel(b, index=False)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel", data=b.getvalue(), file_name="sorting_report.xlsx")
