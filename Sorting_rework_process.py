import streamlit as st
import pandas as pd
import os
import datetime
from io import BytesIO

st.set_page_config(page_title="Sorting Process Tracker", layout="wide")
st.title("üõ†Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Sorting & Rework")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏ñ‡∏≤‡∏ß‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô
emp_path = "/mnt/data/employee_list.xlsx"
part_path = "/mnt/data/part_codes.xlsx"
report_path = "/mnt/data/sorting_report.xlsx"

# ===== Upload ‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï) =====
with st.expander("üì• ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô"):
    uploaded_emp = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (Excel)", type=["xlsx"], key="emp")
    if uploaded_emp:
        with open(emp_path, "wb") as f:
            f.write(uploaded_emp.getbuffer())
        st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    uploaded_part = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (Excel)", type=["xlsx"], key="part")
    if uploaded_part:
        with open(part_path, "wb") as f:
            f.write(uploaded_part.getbuffer())
        st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô =====
if os.path.exists(emp_path):
    df_emp = pd.read_excel(emp_path)
    employees = df_emp.iloc[:, 0].dropna().unique().tolist()
else:
    employees = []

if os.path.exists(part_path):
    df_part = pd.read_excel(part_path)
    part_codes = df_part.iloc[:, 0].dropna().unique().tolist()
else:
    part_codes = []

# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Report =====
if os.path.exists(report_path):
    report_df = pd.read_excel(report_path)
else:
    report_df = pd.DataFrame(columns=[
        "Job ID", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏ß‡∏•‡∏≤", "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à",
        "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô", "‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à"])

# ===== Function ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID =====
def generate_job_id():
    now = datetime.datetime.now()
    prefix = now.strftime("%y%m")
    if "Job ID" in report_df.columns:
        existing = report_df[report_df["Job ID"].astype(str).str.startswith(prefix)]
    else:
        existing = pd.DataFrame()
    next_num = len(existing) + 1
    return f"{prefix}{next_num:04d}"

# ===== ‡πÅ‡∏ö‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Sorting MC =====
st.subheader("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Sorting MC")
with st.form("sorting_form"):
    col1, col2, col3 = st.columns(3)
    with col1:
        part_code = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_codes)
    with col2:
        total_checked = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0, step=1)
    with col3:
        total_ng = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0, max_value=total_checked, step=1)

    total_unchecked = total_checked - total_ng
    st.markdown(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à:** {total_unchecked}")

    operator = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å", employees)

    submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô")
    if submitted:
        now = datetime.datetime.now()
        job_id = generate_job_id()
        new_row = {
            "Job ID": job_id,
            "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": now.date(),
            "‡πÄ‡∏ß‡∏•‡∏≤": now.strftime("%H:%M:%S"),
            "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part_code,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à": total_checked,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG": total_ng,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": total_unchecked,
            "‡∏ú‡∏π‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å": operator,
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "Waiting Judgement",
            "‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô": "",
            "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô": "",
            "‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à": ""
        }
        report_df = pd.concat([report_df, pd.DataFrame([new_row])], ignore_index=True)
        report_df.to_excel(report_path, index=False)
        st.success(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß | Job ID: {job_id}")

# ===== ‡πÇ‡∏´‡∏°‡∏î Waiting Judgement =====
st.subheader("üîç ‡πÇ‡∏´‡∏°‡∏î Waiting Judgement")
waiting_df = report_df[report_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Waiting Judgement"]
for i, row in waiting_df.iterrows():
    col1, col2, col3, col4 = st.columns([2, 2, 2, 1])
    with col1:
        st.write(f"Job ID: {row['Job ID']}")
    with col2:
        st.write(f"‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']}")
    with col3:
        st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏£‡∏ß‡∏à']}")
    with col4:
        judge_name = st.selectbox(f"‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô {row['Job ID']}", employees, key=f"judge_{i}")
        col_btn1, col_btn2 = st.columns(2)
        with col_btn1:
            if st.button("üìõ Scrap", key=f"scrap_{i}"):
                report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Scrap"
                report_df.at[i, "‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô"] = judge_name
                report_df.at[i, "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô"] = datetime.datetime.now().strftime("%H:%M:%S")
                report_df.to_excel(report_path, index=False)
                st.experimental_rerun()
        with col_btn2:
            if st.button("üîÅ Rework", key=f"rework_{i}"):
                report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Oil Cleaning"
                report_df.at[i, "‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô"] = judge_name
                report_df.at[i, "‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô"] = datetime.datetime.now().strftime("%H:%M:%S")
                report_df.to_excel(report_path, index=False)
                st.experimental_rerun()

# ===== ‡πÇ‡∏´‡∏°‡∏î Oil Cleaning =====
st.subheader("üßº ‡πÇ‡∏´‡∏°‡∏î Oil Cleaning")
oil_df = report_df[report_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Oil Cleaning"]
for i, row in oil_df.iterrows():
    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        st.write(f"Job ID: {row['Job ID']}")
    with col2:
        st.write(f"‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']}")
    with col3:
        if st.button("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß", key=f"cleaned_{i}"):
            report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Lavage Completed"
            report_df.at[i, "‡πÄ‡∏ß‡∏•‡∏≤‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à"] = datetime.datetime.now().strftime("%H:%M:%S")
            report_df.to_excel(report_path, index=False)
            st.experimental_rerun()

# ===== WIP =====
st.subheader("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (WIP)")
wip_df = report_df[~report_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].isin(["Scrap", "Lavage Completed"])]
st.dataframe(wip_df, use_container_width=True)

# ===== ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô =====
st.subheader("üìÅ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
output = BytesIO()
report_df.to_excel(output, index=False)
st.download_button(
    label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel",
    data=output.getvalue(),
    file_name="sorting_report_updated.xlsx",
    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
)
