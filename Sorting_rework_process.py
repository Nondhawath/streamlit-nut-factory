import streamlit as st
import pandas as pd
import datetime
import os
from io import BytesIO

st.set_page_config(page_title="Nut Factory Sorting", layout="wide")
st.title("üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡∏±‡∏î‡πÅ‡∏¢‡∏Å‡∏ô‡πä‡∏≠‡∏ï (Sorting Tracking System)")

# ---------- Session State Initial ----------
if "employee_df" not in st.session_state:
    emp_path = "/mnt/data/‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å Final Inspection.xlsx"
    st.session_state.employee_df = pd.read_excel(emp_path)

if "part_df" not in st.session_state:
    part_path = "/mnt/data/Master list SCS part name.xlsx"
    st.session_state.part_df = pd.read_excel(part_path)

if "report_df" not in st.session_state:
    st.session_state.report_df = pd.DataFrame()

# ---------- Load Employee & Part Code ----------
employees = st.session_state.employee_df.iloc[:, 0].dropna().unique().tolist()
part_codes = st.session_state.part_df.iloc[:, 0].dropna().unique().tolist()

# ---------- Generate Job ID ----------
def generate_job_id():
    now = datetime.datetime.now()
    prefix = now.strftime("%y%m")
    report_df = st.session_state.report_df
    if not report_df.empty and "Job ID" in report_df.columns:
        filtered = report_df[report_df["Job ID"].astype(str).str.startswith(prefix)]
        count = len(filtered) + 1
    else:
        count = 1
    return f"{prefix}{count:04d}"

# ---------- Submit Section ----------
st.sidebar.header("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£")
mode = st.sidebar.radio("‡πÇ‡∏´‡∏°‡∏î‡∏á‡∏≤‡∏ô", ["Sorting MC", "Waiting Judgement", "Oil Cleaning"])

with st.form("sorting_form"):
    if mode == "Sorting MC":
        st.subheader("üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô Sorting")
        job_id = generate_job_id()
        part_code = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", options=part_codes)
        employee = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", options=employees)
        quantity_checked = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        quantity_ng = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
        quantity_remaining = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        submit = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏á‡∏≤‡∏ô")

        if submit:
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à Job ID: {job_id}")
            new_row = {
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": datetime.datetime.now().strftime("%Y-%m-%d %H:%M"),
                "Job ID": job_id,
                "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part_code,
                "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": employee,
                "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß": quantity_checked,
                "NG": quantity_ng,
                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": quantity_remaining,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "Sorting MC"
            }
            st.session_state.report_df = pd.concat([st.session_state.report_df, pd.DataFrame([new_row])], ignore_index=True)

    elif mode == "Waiting Judgement":
        st.subheader("‚öñÔ∏è ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à Scrap / Rework")
        df = st.session_state.report_df
        waiting_df = df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Sorting MC"]
        selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", options=waiting_df["Job ID"].tolist())
        judge_name = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤", options=employees)
        col1, col2 = st.columns(2)
        if col1.form_submit_button("üóëÔ∏è Scrap"):
            st.session_state.report_df.loc[df["Job ID"] == selected, ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"]] = ["Scrap", judge_name]
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Scrap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Job ID: {selected}")
        if col2.form_submit_button("üîÅ Rework"):
            st.session_state.report_df.loc[df["Job ID"] == selected, ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏ú‡∏π‡πâ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤"]] = ["Oil Cleaning", judge_name]
            st.success(f"‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏•‡πâ‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô Job ID: {selected}")

    elif mode == "Oil Cleaning":
        st.subheader("üßº ‡∏•‡πâ‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à")
        df = st.session_state.report_df
        cleaning_df = df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Oil Cleaning"]
        selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏≤‡∏á‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à", options=cleaning_df["Job ID"].tolist())
        if st.form_submit_button("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"):
            st.session_state.report_df.loc[df["Job ID"] == selected, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Lavage"
            st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Job ID: {selected}")

# ---------- WIP Dashboard ----------
st.markdown("---")
st.header("üìä ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (WIP)")
df = st.session_state.report_df
if not df.empty:
    wip_status = df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].isin(["Sorting MC", "Oil Cleaning"])]
    st.dataframe(wip_status, use_container_width=True)

    # Pie chart
    pie_df = df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"].value_counts().reset_index()
    pie_df.columns = ["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
    st.plotly_chart({
        "data": [{
            "type": "pie",
            "labels": pie_df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"],
            "values": pie_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"]
        }],
        "layout": {"title": "‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"}
    })

    # Download
    output = BytesIO()
    df.to_excel(output, index=False)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel", data=output.getvalue(), file_name="sorting_report_updated.xlsx")
else:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")
