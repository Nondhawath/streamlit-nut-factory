import streamlit as st 
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime
import io

st.set_page_config(page_title="Sorting Process App", layout="wide")

# ----- File Upload Instead of Hardcoded Filenames -----
st.header("üìÅ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô")
emp_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (Excel)", type=["xlsx"])
part_file = st.file_uploader("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (Excel)", type=["xlsx"])

if emp_file and part_file:
    df_emp = pd.read_excel(emp_file)
    df_part = pd.read_excel(part_file)

    employees = df_emp['‡∏ä‡∏∑‡πà‡∏≠'].dropna().unique().tolist()
    leaders = df_emp[df_emp['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'].str.contains("Leader", na=False)]['‡∏ä‡∏∑‡πà‡∏≠'].unique().tolist()
    part_codes = df_part['‡∏£‡∏´‡∏±‡∏™'].dropna().unique().tolist()

    # ----- Load Existing Report or Create New -----
    DATA_FILE = "sorting_report_updated.xlsx"

    def load_report():
        try:
            return pd.read_excel(DATA_FILE)
        except:
            columns = [
                "Timestamp", "Employee", "Part Code", "Total Checked", "NG", "Un-Tested", "Status", 
                "Current Process", "Rework Time", "Leader", "Oil Cleaning Time", "Sender"
            ]
            return pd.DataFrame(columns=columns)

    report_df = load_report()

    # ----- Form Input -----
    st.header("üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å Sorting")
    st.markdown("---")

    with st.form("sorting_form"):
        col1, col2 = st.columns(2)
        with col1:
            employee = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", employees)
            part_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)", "")
            part_code_dropdown = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", ["‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + part_codes)
            if part_code_dropdown != "‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å":
                part_code = part_code_dropdown

            total_checked = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
            ng = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
            untested = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô (Un-Tested)", min_value=0)

        with col2:
            status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏á‡∏≤‡∏ô NG ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "Rework", "Scrap"])
            current_process = "Sorting"
            rework_time = ""
            leader = ""
            oil_time = ""
            sender = ""

            if status == "Rework":
                leader = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Leader ‡∏ú‡∏π‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", leaders, key="leader_select")
                rework = st.checkbox("üì§ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å Oil Cleaning")
                if rework:
                    rework_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            if status == "Rework" and st.checkbox("üì§ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Sorting"):
                oil_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                sender = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö", employees, key="sender_select")

        submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        if submitted:
            new_data = pd.DataFrame([{
                "Timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "Employee": employee,
                "Part Code": part_code,
                "Total Checked": total_checked,
                "NG": ng,
                "Un-Tested": untested,
                "Status": status,
                "Current Process": current_process,
                "Rework Time": rework_time,
                "Leader": leader,
                "Oil Cleaning Time": oil_time,
                "Sender": sender
            }])
            report_df = pd.concat([report_df, new_data], ignore_index=True)
            report_df.to_excel(DATA_FILE, index=False)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    # ----- Report Table -----
    st.subheader("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
    filter_date = st.date_input("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=None)
    filter_status = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏á‡∏≤‡∏ô NG ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "Rework", "Scrap"])

    filtered_df = report_df.copy()
    if filter_date:
        filtered_df = filtered_df[filtered_df["Timestamp"].str.contains(filter_date.strftime("%Y-%m-%d"))]
    if filter_status != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered_df = filtered_df[filtered_df["Status"] == filter_status]

    st.dataframe(filtered_df, use_container_width=True)

    # ----- Pie Chart -----
    st.subheader("üìà ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏á‡∏≤‡∏ô Scrap ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Rework")
    pie_df = report_df[report_df['Status'].isin(["Scrap", "Rework"])]
    if not pie_df.empty:
        status_counts = pie_df["Status"].value_counts()
        fig, ax = plt.subplots()
        ax.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        st.pyplot(fig)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Scrap ‡∏´‡∏£‡∏∑‡∏≠ Rework ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü")

    # ----- Download Button -----
    st.download_button(
        "üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô Excel", 
        data=report_df.to_excel(index=False, engine='openpyxl'), 
        file_name="sorting_report.xlsx"
    )
else:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
