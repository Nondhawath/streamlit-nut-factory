from datetime import datetime
import pandas as pd
import streamlit as st
import os
from PIL import Image

# üìÅ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå
DATA_DIR = "data"
IMAGE_FOLDER = os.path.join(DATA_DIR, "images")
REPORT_PATH = os.path.join(DATA_DIR, "report.xlsx")
EMP_PATH = os.path.join(DATA_DIR, "employee_master.xlsx")
PART_PATH = os.path.join(DATA_DIR, "part_code_master.xlsx")

# üõ° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
try:
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(IMAGE_FOLDER, exist_ok=True)
except Exception as e:
    st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")

# üìÑ ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Master

def load_master_data():
    try:
        emp_df = pd.read_excel(EMP_PATH)
    except:
        emp_df = pd.DataFrame(columns=["‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"])

    try:
        part_df = pd.read_excel(PART_PATH)
    except:
        part_df = pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô"])

    return emp_df, part_df

# üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Master

def save_master_file(uploaded_file, path):
    try:
        df = pd.read_excel(uploaded_file)
        df.to_excel(path, index=False)
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå: {e}")

# üîÅ ‡πÇ‡∏´‡∏•‡∏î Master ‡πÅ‡∏•‡∏∞ Report
emp_df, part_df = load_master_data()
if os.path.exists(REPORT_PATH):
    report_df = pd.read_excel(REPORT_PATH)
else:
    report_df = pd.DataFrame(columns=[
        "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "Job ID", "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à",
        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡πÄ‡∏ß‡∏•‡∏≤ Scrap/Rework", "‡πÄ‡∏ß‡∏•‡∏≤ Lavage", "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
    ])

# üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

def generate_job_id():
    now = datetime.now()
    prefix = now.strftime("%y%m")
    existing = report_df[report_df['Job ID'].astype(str).str.startswith(prefix)]
    last_seq = max([int(str(jid)[-4:]) for jid in existing['Job ID'] if str(jid)[-4:].isdigit()], default=0)
    return f"{prefix}{last_seq + 1:04d}"

# üñ• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô UI
st.set_page_config(page_title="Sorting Process", layout="wide")
st.title("üîß ‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sorting Process ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏ô‡πä‡∏≠‡∏ï")

menu = st.sidebar.selectbox("üìå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î", [
    "üì• Sorting MC", "üßæ Waiting Judgement", "üíß Oil Cleaning", "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "üõ† Upload Master"
])

# üì• ‡πÇ‡∏´‡∏°‡∏î 1: Sorting MC
if menu == "üì• Sorting MC":
    st.subheader("üì• ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Sorting")
    with st.form("sorting_form"):
        job_id = generate_job_id()
        st.markdown(f"**üÜî Job ID:** `{job_id}`")

        emp_list = emp_df['‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'].dropna().unique() if '‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' in emp_df.columns else []
        part_list = part_df['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô'].dropna().unique() if '‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô' in part_df.columns else []

        employee = st.selectbox("üë∑‚Äç‚ôÇÔ∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", emp_list)
        part_code = st.selectbox("üî© ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_list)
        qty_ng = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
        qty_pending = st.number_input("‚è≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        total = qty_ng + qty_pending
        image = st.file_uploader("üì∏ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û", type=["png", "jpg", "jpeg"])

        submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        if submitted:
            image_path = ""
            if image:
                try:
                    image_path = os.path.join(IMAGE_FOLDER, f"{job_id}.jpg")
                    with open(image_path, "wb") as f:
                        f.write(image.read())
                except PermissionError:
                    st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå")
                    image_path = ""
                except Exception as e:
                    st.error(f"‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {e}")
                    image_path = ""

            new_row = {
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": datetime.now().date(),
                "Job ID": job_id,
                "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô": employee,
                "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part_code,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG": qty_ng,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_pending,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î": total,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": "Sorting MC",
                "‡πÄ‡∏ß‡∏•‡∏≤ Scrap/Rework": "",
                "‡πÄ‡∏ß‡∏•‡∏≤ Lavage": "",
                "‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û": image_path
            }

            report_df = pd.concat([report_df, pd.DataFrame([new_row])], ignore_index=True)
            report_df.to_excel(REPORT_PATH, index=False)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
