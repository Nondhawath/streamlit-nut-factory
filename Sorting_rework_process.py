from datetime import datetime
import pandas as pd
import streamlit as st
import os
from PIL import Image

# ЁЯУБ Path р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Др╕Яр╕ер╣М
DATA_DIR = "data"
IMAGE_FOLDER = os.path.join(DATA_DIR, "images")
REPORT_PATH = os.path.join(DATA_DIR, "report.xlsx")
EMP_PATH = os.path.join(DATA_DIR, "employee_master.xlsx")
PART_PATH = os.path.join(DATA_DIR, "part_code_master.xlsx")

# ЁЯЫб р╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М
try:
    os.makedirs(DATA_DIR, exist_ok=True)
    os.makedirs(IMAGE_FOLDER, exist_ok=True)
except PermissionError:
    st.error("тЭМ р╣Др╕бр╣Ир╕бр╕╡р╕кр╕┤р╕Чр╕Шр╕┤р╣Мр╣Гр╕Щр╕Бр╕▓р╕гр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М")
except Exception as e:
    st.error(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╕гр╣Йр╕▓р╕Зр╣Вр╕Яр╕ер╣Ар╕Фр╕нр╕гр╣М: {e}")

# ЁЯУД р╣Вр╕лр╕ер╕Ф Master
def load_master_data():
    try:
        emp_df = pd.read_excel(EMP_PATH, engine="openpyxl")
    except:
        emp_df = pd.DataFrame(columns=["р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ"])
    try:
        part_df = pd.read_excel(PART_PATH, engine="openpyxl")
    except:
        part_df = pd.DataFrame(columns=["р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ"])
    return emp_df, part_df

# ЁЯТ╛ Save Master
def save_master_file(uploaded_file, path):
    try:
        df = pd.read_excel(uploaded_file, engine="openpyxl")
        df.to_excel(path, index=False, engine="openpyxl")
    except Exception as e:
        st.error(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╣Др╕Яр╕ер╣М: {e}")

# ЁЯФБ Load Data
emp_df, part_df = load_master_data()
if os.path.exists(REPORT_PATH):
    try:
        report_df = pd.read_excel(REPORT_PATH, engine="openpyxl")
    except:
        report_df = pd.DataFrame()
else:
    report_df = pd.DataFrame()

# ЁЯЖФ р╕кр╕гр╣Йр╕▓р╕З Job ID
def generate_job_id():
    now = datetime.now()
    prefix = now.strftime("%y%m")
    existing = report_df[report_df['Job ID'].astype(str).str.startswith(prefix)] if 'Job ID' in report_df.columns else []
    try:
        last_seq = max([int(str(jid)[-4:]) for jid in existing['Job ID'] if str(jid)[-4:].isdigit()], default=0)
    except:
        last_seq = 0
    return f"{prefix}{last_seq + 1:04d}"

# ЁЯМР UI р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щ
st.set_page_config(page_title="Sorting Process", layout="wide")
st.title("ЁЯФз р╕гр╕░р╕Ър╕Ър╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е Sorting Process - SCS")
menu = st.sidebar.selectbox("ЁЯУМ р╣Ар╕ер╕╖р╕нр╕Бр╣Вр╕лр╕бр╕Ф", [
    "ЁЯУе Sorting MC", "ЁЯз╛ Waiting Judgement", "ЁЯТз Oil Cleaning", "ЁЯУК р╕гр╕▓р╕вр╕Зр╕▓р╕Щ", "ЁЯЫа Upload Master"
])

# ЁЯУе р╣Вр╕лр╕бр╕Ф 1: Sorting MC
if menu == "ЁЯУе Sorting MC":
    st.subheader("ЁЯУе р╕Бр╕гр╕нр╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е Sorting")
    with st.form("sorting_form"):
        job_id = generate_job_id()
        st.markdown(f"**ЁЯЖФ Job ID:** `{job_id}`")

        emp_list = emp_df['р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ'].dropna().unique() if 'р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ' in emp_df.columns else []
        part_list = part_df['р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ'].dropna().unique() if 'р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ' in part_df.columns else []

        employee = st.selectbox("ЁЯС╖тАНтЩВя╕П р╣Ар╕ер╕╖р╕нр╕Бр╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ", emp_list)
        part_code = st.selectbox("ЁЯФй р╣Ар╕ер╕╖р╕нр╕Бр╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ", part_list)
        machine = st.selectbox("ЁЯЫа р╣Ар╕ер╕╖р╕нр╕Бр╕Кр╕╖р╣Ир╕нр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З", [f"SM{i:02}" for i in range(1, 31)])
        lot_number = st.text_input("ЁЯУж Lot Number")
        qty_checked = st.number_input("ЁЯФН р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Вр╕нр╕З Lot", min_value=0)
        qty_ng = st.number_input("тЭМ р╕Ир╕│р╕Щр╕зр╕Щ NG", min_value=0)
        qty_pending = st.number_input("тП│ р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Хр╕гр╕зр╕И", min_value=0)
        total = qty_ng + qty_pending
        image = st.file_uploader("ЁЯУ╕ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю", type=["png", "jpg", "jpeg"])

        submitted = st.form_submit_button("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕е")
        if submitted:
            image_path = ""
            if image:
                try:
                    image_path = os.path.join(IMAGE_FOLDER, f"{job_id}.jpg")
                    with open(image_path, "wb") as f:
                        f.write(image.read())
                except Exception as e:
                    st.error(f"тЭМ р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕гр╕╣р╕Ыр╕ар╕▓р╕Ю: {e}")
                    image_path = ""

            new_row = {
                "р╕зр╕▒р╕Щр╕Чр╕╡р╣И": datetime.now().replace(microsecond=0),
                "Job ID": job_id,
                "р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ": employee,
                "р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ": part_code,
                "р╕Кр╕╖р╣Ир╕нр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З": machine,
                "Lot Number": lot_number,
                "р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Вр╕нр╕З Lot": qty_checked,
                "р╕Ир╕│р╕Щр╕зр╕Щ NG": qty_ng,
                "р╕Ир╕│р╕Щр╕зр╕Щр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Хр╕гр╕зр╕И": qty_pending,
                "р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф": total,
                "р╕кр╕Цр╕▓р╕Щр╕░": "Sorting MC",
                "р╣Ар╕зр╕ер╕▓ Scrap/Rework": "",
                "р╣Ар╕зр╕ер╕▓ Lavage": "",
                "р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю": image_path
            }

            report_df = pd.concat([report_df, pd.DataFrame([new_row])], ignore_index=True)
            report_df.to_excel(REPORT_PATH, index=False, engine="openpyxl")
            st.success("тЬЕ р╕Ър╕▒р╕Щр╕Чр╕╢р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з")

# ЁЯз╛ р╣Вр╕лр╕бр╕Ф 2: Waiting Judgement
elif menu == "ЁЯз╛ Waiting Judgement":
    password = st.text_input("ЁЯФР р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕кр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Вр╣Йр╕▓р╕кр╕╣р╣Ир╣Вр╕лр╕бр╕Ф Judgement", type="password")
    if password == "Admin1":
        st.subheader("ЁЯФН р╕гр╕нр╕Хр╕▒р╕Фр╕кр╕┤р╕Щр╣Гр╕И: Rework р╕лр╕гр╕╖р╕н Scrap")
        pending_jobs = report_df[report_df["р╕кр╕Цр╕▓р╕Щр╕░"] == "Sorting MC"]
        for idx, row in pending_jobs.iterrows():
            col1, col2, col3 = st.columns([2, 2, 2])
            with col1:
                st.markdown(f"ЁЯЖФ **{row['Job ID']}** - р╕гр╕лр╕▒р╕к: {row['р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ']}")
                st.markdown(f"тЭМ NG: {row['р╕Ир╕│р╕Щр╕зр╕Щ NG']} / тП│ р╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Хр╕гр╕зр╕И: {row['р╕Ир╕│р╕Щр╕зр╕Щр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Хр╕гр╕зр╕И']}")
                if isinstance(row['р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю'], str) and os.path.exists(row['р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю']):
                    st.image(row['р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю'], width=200)
            with col2:
                if st.button("тЩ╗я╕П Rework", key=f"rework_{row['Job ID']}"):
                    report_df.at[idx, "р╕кр╕Цр╕▓р╕Щр╕░"] = "Rework"
                    report_df.at[idx, "р╣Ар╕зр╕ер╕▓ Scrap/Rework"] = datetime.now().replace(microsecond=0)
                    report_df.to_excel(REPORT_PATH, index=False, engine="openpyxl")
                    st.rerun()
            with col3:
                if st.button("ЁЯЧС Scrap", key=f"scrap_{row['Job ID']}"):
                    report_df.at[idx, "р╕кр╕Цр╕▓р╕Щр╕░"] = "Scrap"
                    report_df.at[idx, "р╣Ар╕зр╕ер╕▓ Scrap/Rework"] = datetime.now().replace(microsecond=0)
                    report_df.to_excel(REPORT_PATH, index=False, engine="openpyxl")
                    st.rerun()
    else:
        st.warning("ЁЯФТ р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╣Йр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")

# ЁЯТз р╣Вр╕лр╕бр╕Ф 3: Oil Cleaning
elif menu == "ЁЯТз Oil Cleaning":
    st.subheader("ЁЯТз р╕Зр╕▓р╕Щр╕гр╕нр╣Ар╕Вр╣Йр╕▓р╕Бр╕гр╕░р╕Ър╕зр╕Щр╕Бр╕▓р╕гр╕ер╣Йр╕▓р╕З")
    jobs = report_df[report_df["р╕кр╕Цр╕▓р╕Щр╕░"] == "Rework"]
    for idx, row in jobs.iterrows():
        col1, col2 = st.columns([3, 1])
        with col1:
            st.markdown(f"ЁЯЖФ {row['Job ID']} - {row['р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ']} ({row['р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ']})")
        with col2:
            if st.button("тЬЕ р╕ер╣Йр╕▓р╕Зр╣Ар╕кр╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з", key=f"done_{row['Job ID']}"):
                report_df.at[idx, "р╕кр╕Цр╕▓р╕Щр╕░"] = "Lavage"
                report_df.at[idx, "р╣Ар╕зр╕ер╕▓ Lavage"] = datetime.now().replace(microsecond=0)
                report_df.to_excel(REPORT_PATH, index=False, engine="openpyxl")
                st.rerun()

# ЁЯУК р╣Вр╕лр╕бр╕Ф 4: р╕гр╕▓р╕вр╕Зр╕▓р╕Щ
elif menu == "ЁЯУК р╕гр╕▓р╕вр╕Зр╕▓р╕Щ":
    st.subheader("ЁЯУК р╕кр╕гр╕╕р╕Ыр╣Бр╕ер╕░р╕гр╕▓р╕вр╕Зр╕▓р╕Щр╕Зр╕▓р╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф")
    view = st.selectbox("р╣Ар╕ер╕╖р╕нр╕Бр╕Кр╣Ир╕зр╕Зр╣Ар╕зр╕ер╕▓", ["р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф", "р╕гр╕▓р╕вр╕зр╕▒р╕Щ", "р╕гр╕▓р╕вр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М", "р╕гр╕▓р╕вр╣Ар╕Фр╕╖р╕нр╕Щ", "р╕гр╕▓р╕вр╕Ыр╕╡"])
    now = datetime.now()
    df = report_df.copy()

    # ЁЯФН р╕Др╣Йр╕Щр╕лр╕▓ Lot Number
    search_lot = st.text_input("ЁЯФО р╕Др╣Йр╕Щр╕лр╕▓р╣Вр╕Фр╕в Lot Number")
    if search_lot:
        df = df[df["Lot Number"].astype(str).str.contains(search_lot, case=False, na=False)]

    if view == "р╕гр╕▓р╕вр╕зр╕▒р╕Щ":
        df = df[df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"].dt.date == now.date()]
    elif view == "р╕гр╕▓р╕вр╕кр╕▒р╕Ыр╕Фр╕▓р╕лр╣М":
        df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"] = pd.to_datetime(df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"], errors="coerce")
        df = df[df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"] >= now - pd.Timedelta(days=7)]
    elif view == "р╕гр╕▓р╕вр╣Ар╕Фр╕╖р╕нр╕Щ":
        df = df[df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"].dt.month == now.month]
    elif view == "р╕гр╕▓р╕вр╕Ыр╕╡":
        df = df[df["р╕зр╕▒р╕Щр╕Чр╕╡р╣И"].dt.year == now.year]

    st.dataframe(df)

    scrap_summary = df[df["р╕кр╕Цр╕▓р╕Щр╕░"] == "Scrap"].groupby("р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ")["р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"].sum().reset_index()
    st.markdown("ЁЯУМ **р╕кр╕гр╕╕р╕Ыр╕Зр╕▓р╕Щ Scrap р╣Бр╕вр╕Бр╕Хр╕▓р╕бр╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ**")
    st.dataframe(scrap_summary)
    # ЁЯФР р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф (р╕Хр╣Йр╕нр╕Зр╣Гр╕кр╣Ир╕гр╕лр╕▒р╕к)
    with st.expander("ЁЯз╣ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ: р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"):
        admin_pass = st.text_input("ЁЯФР р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕Ьр╕╣р╣Йр╕Фр╕╣р╣Бр╕ер╕гр╕░р╕Ър╕Ъ", type="password")
        if admin_pass == "Adminfiscs":
            if st.button("тЪая╕П р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"):
                confirm = st.checkbox("тЬЕ р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕зр╣Ир╕▓р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф")
                if confirm:
                    try:
                        empty_df = pd.DataFrame(columns=[
                            "р╕зр╕▒р╕Щр╕Чр╕╡р╣И", "Job ID", "р╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ", "р╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ", "р╕Кр╕╖р╣Ир╕нр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З", "Lot Number",
                            "р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╕Вр╕нр╕З Lot", "р╕Ир╕│р╕Щр╕зр╕Щ NG", "р╕Ир╕│р╕Щр╕зр╕Щр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕Хр╕гр╕зр╕И",
                            "р╕Ир╕│р╕Щр╕зр╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф", "р╕кр╕Цр╕▓р╕Щр╕░", "р╣Ар╕зр╕ер╕▓ Scrap/Rework", "р╣Ар╕зр╕ер╕▓ Lavage", "р╕гр╕╣р╕Ыр╕ар╕▓р╕Ю"
                        ])
                        empty_df.to_excel(REPORT_PATH, index=False, engine="openpyxl")
                        st.success("тЬЕ р╕ер╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Фр╣Ар╕гр╕╡р╕вр╕Ър╕гр╣Йр╕нр╕вр╣Бр╕ер╣Йр╕з")
                        st.rerun()
                    except Exception as e:
                        st.error(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Вр╕Ур╕░р╕ер╣Йр╕▓р╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕е: {e}")
        elif admin_pass:
            st.error("тЭМ р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")


# ЁЯЫа р╣Вр╕лр╕бр╕Ф 5: Upload Master
elif menu == "ЁЯЫа Upload Master":
    password = st.text_input("ЁЯФР р╣Гр╕кр╣Ир╕гр╕лр╕▒р╕к Sup р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф Master", type="password")
    if password == "Sup":
        st.subheader("ЁЯЫа р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф Master Data")
        emp_upload = st.file_uploader("ЁЯСе р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Юр╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ", type="xlsx", key="emp")
        part_upload = st.file_uploader("ЁЯз╛ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕гр╕лр╕▒р╕кр╕Зр╕▓р╕Щ", type="xlsx", key="part")
        if st.button("ЁЯУд р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф"):
            if emp_upload:
                save_master_file(emp_upload, EMP_PATH)
            if part_upload:
                save_master_file(part_upload, PART_PATH)
            st.success("тЬЕ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Бр╕ер╕░р╕Ър╕▒р╕Щр╕Чр╕╢р╕Б Master р╕кр╕│р╣Ар╕гр╣Зр╕Ир╣Бр╕ер╣Йр╕з")
            st.rerun()
