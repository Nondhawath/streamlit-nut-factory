import streamlit as st
import pandas as pd
import datetime
import os

# ------------------ CONFIG ------------------
EMP_PATH = "employee_list.xlsx"
PART_PATH = "part_code_list.xlsx"
REPORT_PATH = "sorting_report.xlsx"
JUDGEMENT_PASSWORD = "Admin1"

st.set_page_config(page_title="Sorting Process", layout="wide")

# ------------------ LOAD MASTER FILES ------------------
@st.cache_data
def load_excel_file(path):
    if os.path.exists(path):
        return pd.read_excel(path)
    return pd.DataFrame()

employee_df = load_excel_file(EMP_PATH)
part_df = load_excel_file(PART_PATH)

# ------------------ UPLOAD MASTER ------------------
with st.sidebar.expander("üì§ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô"):
    emp_upload = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", type="xlsx")
    if emp_upload:
        employee_df = pd.read_excel(emp_upload)
        employee_df.to_excel(EMP_PATH, index=False)
        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

    part_upload = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", type="xlsx")
    if part_upload:
        part_df = pd.read_excel(part_upload)
        part_df.to_excel(PART_PATH, index=False)
        st.success("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

employees = employee_df['‡∏ä‡∏∑‡πà‡∏≠'].dropna().unique().tolist() if '‡∏ä‡∏∑‡πà‡∏≠' in employee_df.columns else []
part_codes = part_df['‡∏£‡∏´‡∏±‡∏™'].dropna().unique().tolist() if '‡∏£‡∏´‡∏±‡∏™' in part_df.columns else []

# ------------------ LOAD REPORT ------------------
def load_report():
    if os.path.exists(REPORT_PATH):
        return pd.read_excel(REPORT_PATH)
    return pd.DataFrame()

def save_report(df):
    df.to_excel(REPORT_PATH, index=False)

report_df = load_report()

# ------------------ Job ID Generator ------------------
def generate_job_id():
    now = datetime.datetime.now()
    prefix = now.strftime("%y%m")
    if 'Job ID' in report_df.columns:
        existing = report_df[report_df['Job ID'].astype(str).str.startswith(prefix)]
        last_seq = max([int(str(jid)[-4:]) for jid in existing['Job ID']]) if not existing.empty else 0
    else:
        last_seq = 0
    return f"{prefix}{last_seq+1:04d}"

# ------------------ MODE SELECTION ------------------
mode = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", ["üì¶ Sorting MC", "‚öñÔ∏è Waiting Judgement", "üßº Oil Cleaning", "üìä WIP ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"])

# ------------------ SORTING MODE ------------------
if mode == "üì¶ Sorting MC":
    st.header("üì¶ ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô Sorting MC")
    with st.form("sorting_form"):
        operator = st.selectbox("üë©‚Äçüè≠ ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", employees)
        part_code = st.selectbox("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_codes)
        qty_checked = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß", min_value=0)
        qty_ng = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
        qty_pending = st.number_input("‚è≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        status = st.radio("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["Waiting Judgement"])
        submit = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if submit:
            job_id = generate_job_id()
            new_data = {
                "Job ID": job_id,
                "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö": operator,
                "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô": part_code,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_checked,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG": qty_ng,
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_pending,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status
            }
            report_df = pd.concat([report_df, pd.DataFrame([new_data])], ignore_index=True)
            save_report(report_df)
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß üéâ (Job ID: {job_id})")

# ------------------ JUDGEMENT MODE ------------------
elif mode == "‚öñÔ∏è Waiting Judgement":
    st.header("‚öñÔ∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ NG")
    password = st.text_input("üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", type="password")
    if password == JUDGEMENT_PASSWORD:
        waiting_jobs = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "Waiting Judgement"]
        for i, row in waiting_jobs.iterrows():
            st.markdown(f"### üîé Job ID: {row['Job ID']} - ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG']}")
            col1, col2 = st.columns(2)
            with col1:
                if st.button(f"üõ† Rework - {row['Job ID']}"):
                    report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Oil Cleaning"
                    save_report(report_df)
                    st.success(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Job ID {row['Job ID']} ‡πÄ‡∏õ‡πá‡∏ô Rework ‡πÅ‡∏•‡πâ‡∏ß")
                    st.experimental_rerun()
            with col2:
                if st.button(f"üóë Scrap - {row['Job ID']}"):
                    report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Scrap"
                    save_report(report_df)
                    st.success(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Job ID {row['Job ID']} ‡πÄ‡∏õ‡πá‡∏ô Scrap ‡πÅ‡∏•‡πâ‡∏ß")
                    st.experimental_rerun()
    else:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Judgement")

# ------------------ OIL CLEANING MODE ------------------
elif mode == "üßº Oil Cleaning":
    st.header("üßº ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î")
    cleaning_jobs = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "Oil Cleaning"]
    for i, row in cleaning_jobs.iterrows():
        st.markdown(f"### üß¥ Job ID: {row['Job ID']} - ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG']}")
        if st.button(f"‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - {row['Job ID']}"):
            report_df.at[i, "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] = "Lavage Done"
            save_report(report_df)
            st.success(f"‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Job ID {row['Job ID']} ‡πÄ‡∏õ‡πá‡∏ô Lavage Done ‡πÅ‡∏•‡πâ‡∏ß")
            st.experimental_rerun()

# ------------------ WIP MODE ------------------
elif mode == "üìä WIP ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
    st.header("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô‡∏Ñ‡∏á‡∏Ñ‡πâ‡∏≤‡∏á (WIP)")
    wip = report_df[report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'].isin(["Waiting Judgement", "Oil Cleaning"])]
    st.dataframe(wip)
    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô WIP", data=wip.to_csv(index=False), file_name="WIP_report.csv")
