import streamlit as st
import pandas as pd
import os
import datetime

st.set_page_config(page_title="Sorting Rework Process", layout="wide")

# Paths to store master data
EMP_FILE = "employee_list.xlsx"
PART_FILE = "part_code_list.xlsx"
REPORT_FILE = "sorting_report.xlsx"

# Load or initialize employee and part code data
def load_master_data():
    if os.path.exists(EMP_FILE):
        emp_df = pd.read_excel(EMP_FILE)
    else:
        emp_df = pd.DataFrame(columns=["‡∏ä‡∏∑‡πà‡∏≠"])

    if os.path.exists(PART_FILE):
        part_df = pd.read_excel(PART_FILE)
    else:
        part_df = pd.DataFrame(columns=["‡∏£‡∏´‡∏±‡∏™"])

    return emp_df, part_df

# Save uploaded master data
uploaded_emp = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", type=[".xlsx"])
if uploaded_emp:
    emp_df = pd.read_excel(uploaded_emp)
    emp_df.to_excel(EMP_FILE, index=False)
    st.sidebar.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

uploaded_part = st.sidebar.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", type=[".xlsx"])
if uploaded_part:
    part_df = pd.read_excel(uploaded_part)
    part_df.to_excel(PART_FILE, index=False)
    st.sidebar.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")

# Load data again
employee_df, part_df = load_master_data()

# Generate job ID
def generate_job_id():
    if os.path.exists(REPORT_FILE):
        report_df = pd.read_excel(REPORT_FILE)
    else:
        report_df = pd.DataFrame(columns=["Job ID"])

    now = datetime.datetime.now()
    prefix = f"{now.year % 100:02}{now.month:02}"
    existing = report_df[report_df['Job ID'].astype(str).str.startswith(prefix)] if not report_df.empty else pd.DataFrame()
    last_seq = max([int(str(jid)[-4:]) for jid in existing['Job ID'] if str(jid).startswith(prefix)] + [0])
    return f"{prefix}{last_seq + 1:04}"

# Load report data
if os.path.exists(REPORT_FILE):
    report_df = pd.read_excel(REPORT_FILE)
else:
    report_df = pd.DataFrame()

# Sidebar: Select Mode
mode = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î", ["üîç Sorting MC", "üß™ Waiting Judgement", "üßº Oil Cleaning", "üì¶ WIP Report"])

if mode == "üîç Sorting MC":
    st.header("üîç Sorting MC")
    with st.form("sorting_form"):
        job_id = generate_job_id()
        st.markdown(f"**Job ID:** `{job_id}`")
        name = st.selectbox("üë§ ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", employee_df['‡∏ä‡∏∑‡πà‡∏≠'].dropna().unique())
        part_code = st.selectbox("üî¢ ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_df['‡∏£‡∏´‡∏±‡∏™'].dropna().unique())
        qty_checked = st.number_input("‚úÖ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß", min_value=0)
        qty_ng = st.number_input("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0)
        qty_pending = st.number_input("‚è≥ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0)
        status = st.selectbox("üìå ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à", "Scrap", "Rework"])
        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if submitted:
            new_entry = pd.DataFrame([{
                "Job ID": job_id,
                "‡∏ä‡∏∑‡πà‡∏≠": name,
                "‡∏£‡∏´‡∏±‡∏™": part_code,
                "‡∏ï‡∏£‡∏ß‡∏à‡πÅ‡∏•‡πâ‡∏ß": qty_checked,
                "NG": qty_ng,
                "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à": qty_pending,
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status,
                "‡πÄ‡∏ß‡∏•‡∏≤": datetime.datetime.now(),
                "‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£": "Sorting"
            }])
            report_df = pd.concat([report_df, new_entry], ignore_index=True)
            report_df.to_excel(REPORT_FILE, index=False)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

elif mode == "üß™ Waiting Judgement":
    st.header("üß™ Waiting Judgement")
    code = st.text_input("üîê ‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
    if code != "Admin1":
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    else:
        pending_df = report_df[(report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à") & (report_df['‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£'] == "Sorting")]
        for _, row in pending_df.iterrows():
            st.markdown(f"**Job ID:** `{row['Job ID']}` | ‡∏£‡∏´‡∏±‡∏™: `{row['‡∏£‡∏´‡∏±‡∏™']}` | NG: {row['NG']}")
            col1, col2 = st.columns(2)
            with col1:
                if st.button(f"‚ùå Scrap {row['Job ID']}"):
                    report_df.loc[report_df['Job ID'] == row['Job ID'], ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£']] = ["Scrap", "‡∏à‡∏ö‡∏á‡∏≤‡∏ô"]
            with col2:
                if st.button(f"üîÅ Rework {row['Job ID']}"):
                    report_df.loc[report_df['Job ID'] == row['Job ID'], ['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£']] = ["Rework", "Oil Cleaning"]
        report_df.to_excel(REPORT_FILE, index=False)

elif mode == "üßº Oil Cleaning":
    st.header("üßº Oil Cleaning")
    oil_df = report_df[(report_df['‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£'] == "Oil Cleaning") & (report_df['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] == "Rework")]
    for _, row in oil_df.iterrows():
        st.markdown(f"**Job ID:** `{row['Job ID']}` | ‡∏£‡∏´‡∏±‡∏™: `{row['‡∏£‡∏´‡∏±‡∏™']}` | NG: {row['NG']}")
        if st.button(f"‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß {row['Job ID']}"):
            report_df.loc[report_df['Job ID'] == row['Job ID'], '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'] = "‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß"
            report_df.loc[report_df['Job ID'] == row['Job ID'], '‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£'] = "‡∏à‡∏ö‡∏á‡∏≤‡∏ô"
    report_df.to_excel(REPORT_FILE, index=False)

elif mode == "üì¶ WIP Report":
    st.header("üì¶ WIP Report")
    wip_df = report_df[report_df['‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£'] != "‡∏à‡∏ö‡∏á‡∏≤‡∏ô"]
    st.dataframe(wip_df)

    st.download_button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô Excel", data=wip_df.to_csv(index=False), file_name="wip_report.csv")
