import streamlit as st
import pandas as pd
import datetime
import os
import uuid
import matplotlib.pyplot as plt

# ========== CONFIGURATION ==========
DATA_FILE = "sorting_data.csv"

# ========== LOAD EXCEL MASTER DATA ==========
@st.cache_data
def load_employee_data():
    df = pd.read_excel("‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å Final Inspection.xlsx")
    return df['‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠'].dropna().tolist(), df[df['‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'] == 'Leader']['‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠'].dropna().tolist()

@st.cache_data
def load_job_codes():
    df = pd.read_excel("Master list SCS part name.xlsx")
    return df['Part Code'].dropna().tolist()

# ========== INITIALIZE MASTER DATA ==========
employees, leaders = load_employee_data()
job_codes = load_job_codes()

# ========== CREATE OR LOAD CSV ==========
if not os.path.exists(DATA_FILE):
    df_empty = pd.DataFrame(columns=[
        "timestamp", "employee", "job_code", "inspected_qty", "ng_qty", "untest_qty",
        "status", "sent_to", "sent_by", "sent_time"
    ])
    df_empty.to_csv(DATA_FILE, index=False)

def load_data():
    return pd.read_csv(DATA_FILE)

def save_data(new_row):
    df = load_data()
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    df.to_csv(DATA_FILE, index=False)

# ========== UI ==========
st.title("Sorting Rework Process")

st.header("üìù ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö")
with st.form("sorting_form"):
    employee = st.selectbox("‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", employees)

    job_code = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
    job_code_dropdown = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", ["‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"] + job_codes)
    if job_code_dropdown != "‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å":
        job_code = job_code_dropdown

    inspected_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", min_value=0, step=1)
    ng_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0, step=1)
    untest_qty = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à (Un test)", min_value=0, step=1)
    status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏á‡∏≤‡∏ô", ["Rework", "Scrap"])

    submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    if submitted:
        new_row = {
            "timestamp": datetime.datetime.now().isoformat(),
            "employee": employee,
            "job_code": job_code,
            "inspected_qty": inspected_qty,
            "ng_qty": ng_qty,
            "untest_qty": untest_qty,
            "status": status,
            "sent_to": "",
            "sent_by": "",
            "sent_time": ""
        }
        save_data(new_row)
        st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

# ========== TRANSFER SECTION ==========
st.header("üì¶ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å")
data = load_data()

for idx, row in data[data['status'] == 'Rework'].iterrows():
    if row['sent_to'] == "":
        st.subheader(f"üîÑ ‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™ {row['job_code']} ‡∏à‡∏≤‡∏Å {row['employee']}")
        if st.button(f"‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å Oil Cleaning - ‡∏á‡∏≤‡∏ô {row['job_code']}", key=f"send_oil_{idx}"):
            leader = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠ Leader", leaders, key=f"leader_{idx}")
            data.at[idx, 'sent_to'] = "Oil Cleaning"
            data.at[idx, 'sent_by'] = leader
            data.at[idx, 'sent_time'] = datetime.datetime.now().isoformat()
            data.to_csv(DATA_FILE, index=False)
            st.success(f"‚úÖ ‡∏™‡πà‡∏á‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÅ‡∏ú‡∏ô‡∏Å Oil Cleaning ‡πÇ‡∏î‡∏¢ {leader}")

    elif row['sent_to'] == "Oil Cleaning":
        st.subheader(f"üîÅ ‡∏á‡∏≤‡∏ô‡∏£‡∏´‡∏±‡∏™ {row['job_code']} ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà Oil Cleaning")
        if st.button(f"‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å Sorting - ‡∏á‡∏≤‡∏ô {row['job_code']}", key=f"return_sorting_{idx}"):
            sender = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö", employees, key=f"return_emp_{idx}")
            data.at[idx, 'sent_to'] = "Sorting"
            data.at[idx, 'sent_by'] = sender
            data.at[idx, 'sent_time'] = datetime.datetime.now().isoformat()
            data.to_csv(DATA_FILE, index=False)
            st.success(f"‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Sorting ‡πÇ‡∏î‡∏¢ {sender}")

# ========== REPORT ==========
st.header("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
selected_status = st.selectbox("‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Rework", "Scrap"])
data['timestamp'] = pd.to_datetime(data['timestamp'])
selected_date = st.date_input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", datetime.date.today())

filtered = data[data['timestamp'].dt.date == selected_date]
if selected_status != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
    filtered = filtered[filtered['status'] == selected_status]

st.dataframe(filtered)

# ========== PIE CHART ==========
st.subheader("üìà ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô Scrap ‡∏Å‡∏±‡∏ö Rework")
count = data['status'].value_counts()
fig, ax = plt.subplots()
ax.pie(count, labels=count.index, autopct='%1.1f%%', startangle=90)
ax.axis('equal')
st.pyplot(fig)
