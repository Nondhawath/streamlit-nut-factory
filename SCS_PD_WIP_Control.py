import streamlit as st
import psycopg2
import pandas as pd
import requests
import math
from datetime import datetime

# === Connection ===
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

# === Telegram Notification ===
def send_telegram_message(message):
    token = st.secrets["telegram"]["token"]
    chat_id = st.secrets["telegram"]["chat_id"]
    url = f"https://api.telegram.org/bot{token}/sendMessage?chat_id={chat_id}&text={message}"
    try:
        requests.get(url)
    except Exception as e:
        st.error(f"Telegram ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

# === Database Operations ===
def insert_job(data):
    with get_connection() as conn:
        cur = conn.cursor()
        keys = ', '.join(data.keys())
        values = ', '.join(['%s'] * len(data))
        sql = f"INSERT INTO job_tracking ({keys}) VALUES ({values})"
        cur.execute(sql, list(data.values()))
        conn.commit()

def update_status(woc, new_status):
    with get_connection() as conn:
        cur = conn.cursor()
        cur.execute("UPDATE job_tracking SET status = %s WHERE woc_number = %s", (new_status, woc))
        conn.commit()

def get_jobs_by_status(status):
    with get_connection() as conn:
        return pd.read_sql("SELECT * FROM job_tracking WHERE status = %s ORDER BY created_at DESC", conn, params=(status,))

def get_jobs_by_status_list(status_list):
    with get_connection() as conn:
        qmarks = ','.join(['%s'] * len(status_list))
        sql = f"SELECT * FROM job_tracking WHERE status IN ({qmarks}) ORDER BY created_at DESC"
        return pd.read_sql(sql, conn, params=status_list)

def get_all_jobs():
    with get_connection() as conn:
        return pd.read_sql("SELECT * FROM job_tracking ORDER BY created_at DESC", conn)

# === Helper ===
def calculate_pieces(total_weight, barrel_weight, sample_weight, sample_count):
    if sample_count == 0:
        return 0
    try:
        return math.ceil((total_weight - barrel_weight) / ((sample_weight / sample_count) / 1000))
    except ZeroDivisionError:
        return 0

# === Transfer Mode ===
def transfer_mode(dept_from):
    st.header(f"{dept_from} Transfer")
    df = get_jobs_by_status("TP Working")  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ TP Working

    if df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠")
        return

    woc_list = df["woc_number"].tolist()
    woc_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å WOC ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠", woc_list)
    job = df[df["woc_number"] == woc_selected].iloc[0]

    st.markdown(f"- **Part Name:** {job['part_name']}")
    st.markdown(f"- **Lot Number:** {job['lot_number']}")
    st.markdown(f"- **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô:** {job['pieces_count']}")

    next_dept = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", ["FI", "OS"])
    if st.button("‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠"):
        update_status(woc_selected, f"{dept_from} Transfer {next_dept}")
        st.success(f"‡∏™‡πà‡∏á WOC {woc_selected} ‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å {next_dept}")
        send_telegram_message(f"{dept_from} ‡∏™‡πà‡∏á WOC {woc_selected} ‡πÑ‡∏õ‡πÅ‡∏ú‡∏ô‡∏Å {next_dept}")

# === Receive Mode ===
def receive_mode(dept_to):
    st.header(f"{dept_to} Receive")
    from_dept_map = {
        "TP": ["FM"],
        "FI": ["TP"],
        "OS": ["FM", "TP"]
    }
    from_depts = from_dept_map.get(dept_to, [])

    status_filters = [f"{fd} Transfer {dept_to}" for fd in from_depts]
    df = get_jobs_by_status_list(status_filters)

    if df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏£‡∏±‡∏ö")
        return

    woc_list = df["woc_number"].tolist()
    woc_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å WOC", woc_list)
    job = df[df["woc_number"] == woc_selected].iloc[0]

    st.markdown(f"- **Part Name:** {job['part_name']}")
    st.markdown(f"- **Lot Number:** {job['lot_number']}")
    st.markdown(f"- **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°:** {job['pieces_count']}")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡∏°‡πà
    total_weight = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°", min_value=0.0, step=0.01, value=0.0)
    barrel_weight = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ñ‡∏±‡∏á", min_value=0.0, step=0.01, value=0.0)
    sample_weight = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏°", min_value=0.0, step=0.01, value=0.0)
    sample_count = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", min_value=0, step=1, value=0)

    pieces_new = calculate_pieces(total_weight, barrel_weight, sample_weight, sample_count)
    st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ", pieces_new)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    try:
        diff_pct = abs(pieces_new - job["pieces_count"]) / job["pieces_count"] * 100 if job["pieces_count"] > 0 else 0
    except Exception:
        diff_pct = 0
    st.metric("% ‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô", f"{diff_pct:.2f}%")

    # ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô Telegram ‡∏´‡∏≤‡∏Å‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 2%
    if diff_pct > 2:
        send_telegram_message(
            f"‚ö†Ô∏è ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô 2% | ‡πÅ‡∏ú‡∏ô‡∏Å: {dept_to} | WOC: {woc_selected} | Part: {job['part_name']} | "
            f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏î‡∏¥‡∏°: {job['pieces_count']} | ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á: {pieces_new} | ‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô: {diff_pct:.2f}%"
        )

    operator_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Operator)")

    if st.button("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠"):
        next_status = f"WIP-{dept_to}"
        insert_job({
            "woc_number": woc_selected,
            "part_name": job["part_name"],
            "operator_name": operator_name,
            "dept_from": dept_to,
            "dept_to": "",  # ‡πÉ‡∏™‡πà‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏≤‡∏° flow
            "lot_number": job["lot_number"],
            "total_weight": total_weight,
            "barrel_weight": barrel_weight,
            "sample_weight": sample_weight,
            "sample_count": sample_count,
            "pieces_count": pieces_new,
            "status": next_status,
            "created_at": datetime.utcnow()
        })
        update_status(woc_selected, "TP Received")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô TP Received
        st.success("‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞")
        send_telegram_message(f"{dept_to} ‡∏£‡∏±‡∏ö WOC {woc_selected}")

# === Work Mode ===
def work_mode(dept):
    st.header(f"{dept} Work")
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "TP Received" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å Tapping
    df = get_jobs_by_status("TP Received")

    if df.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠‡∏ó‡∏≥")
        return

    woc_list = df["woc_number"].tolist()
    woc_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å WOC ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", woc_list)
    job = df[df["woc_number"] == woc_selected].iloc[0]

    st.markdown(f"- **Part Name:** {job['part_name']}")
    st.markdown(f"- **Lot Number:** {job['lot_number']}")
    st.markdown(f"- **‡∏à‡∏≥‡∏ô‡∏ß‡∏ô:** {job['pieces_count']}")

    machine_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
    operator_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Operator)")

    if st.button("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"):
        if not machine_name.strip():
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£")
            return
        update_status(woc_selected, "TP Working")  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô TP Working
        st.success(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô WOC {woc_selected} ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á {machine_name}")
        send_telegram_message(f"{dept} ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô WOC {woc_selected} ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á {machine_name} ‡πÇ‡∏î‡∏¢ {operator_name}")

# === Completion Mode ===
def completion_mode():
    st.header("Completion")
    # ‡∏î‡∏∂‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Working ‡πÉ‡∏ô Final Inspection ‡∏´‡∏£‡∏∑‡∏≠ OS
    status_list = ["Used - FI01", "Used - FI30", "Used - FISM", "Used - OS01", "Used - OS30", "Used - OSSM"]
    df = get_jobs_by_status_list(status_list)
    if df.empty:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏£‡∏≠ Completion")
        return

    woc_list = df["woc_number"].tolist()
    woc_selected = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å WOC ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥ Completion", woc_list)

    ok = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô OK", min_value=0, step=1)
    ng = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", min_value=0, step=1)
    rework = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Rework", min_value=0, step=1)
    remain = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠", min_value=0, step=1)

    operator_name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Operator)")

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Completion"):
        status = "Completed" if remain == 0 else "Remaining"
        update_status(woc_selected, status)
        st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Completion ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô {status}")
        send_telegram_message(
            f"üì¶ Completion WOC {woc_selected} | OK: {ok}, NG: {ng}, Rework: {rework}, Remain: {remain} ‡πÇ‡∏î‡∏¢ {operator_name}"
        )

# === Report Mode ===
def report_mode():
    st.header("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡∏∏‡∏õ WIP")
    df = get_all_jobs()
    search = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Part Name ‡∏´‡∏£‡∏∑‡∏≠ WOC")
    if search:
        df = df[df["part_name"].str.contains(search, case=False) | df["woc_number"].str.contains(search, case=False)]
    st.dataframe(df)

    st.markdown("### ‡∏™‡∏£‡∏∏‡∏õ WIP ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô‡∏Å")
    depts = ["FM", "TP", "FI", "OS"]
    for d in depts:
        wip_df = df[df["status"].str.contains(f"WIP-{d}")]
        if wip_df.empty:
            st.write(f"‡πÅ‡∏ú‡∏ô‡∏Å {d}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô WIP")
        else:
            summary = wip_df.groupby("part_name").agg(
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô=pd.NamedAgg(column="woc_number", aggfunc="count"),
                ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô=pd.NamedAgg(column="pieces_count", aggfunc="sum")
            ).reset_index()
            st.write(f"‡πÅ‡∏ú‡∏ô‡∏Å {d}")
            st.dataframe(summary)

# === Dashboard Mode ===
def dashboard_mode():
    st.header("Dashboard WIP ‡∏£‡∏ß‡∏°")
    df = get_all_jobs()
    depts = ["FM", "TP", "FI", "OS"]

    select_dept = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + depts)

    if select_dept == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
        filtered = df
    else:
        filtered = df[df["dept_to"] == select_dept]

    if filtered.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏Å‡∏ô‡∏µ‡πâ")
        return

    grouped = filtered.groupby(["dept_to", "part_name"]).agg(
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô=pd.NamedAgg(column="woc_number", aggfunc="count"),
        ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô=pd.NamedAgg(column="pieces_count", aggfunc="sum")
    ).reset_index()

    st.dataframe(grouped)

# === Main Function ===
def main():
    st.set_page_config(page_title="WOC Tracker", layout="wide")
    st.title("üè≠ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô (Supabase + Streamlit)")

    menu = st.sidebar.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î", [
        "Forming Transfer", "Tapping Transfer", "OS Transfer",
        "Tapping Receive", "Final Receive", "OS Receive",
        "Tapping Work", "Final Work",
        "Completion", "Report", "Dashboard"
    ])

    if menu == "Forming Transfer":
        transfer_mode("FM")
    elif menu == "Tapping Transfer":
        transfer_mode("TP")
    elif menu == "OS Transfer":
        transfer_mode("OS")
    elif menu == "Tapping Receive":
        receive_mode("TP")
    elif menu == "Final Receive":
        receive_mode("FI")
    elif menu == "OS Receive":
        receive_mode("OS")
    elif menu == "Tapping Work":
        work_mode("TP")
    elif menu == "Final Work":
        work_mode("FI")
    elif menu == "Completion":
        completion_mode()
    elif menu == "Report":
        report_mode()
    elif menu == "Dashboard":
        dashboard_mode()

if __name__ == "__main__":
    main()
