import streamlit as st
import psycopg2
import pandas as pd
from datetime import datetime
import requests

# Connect to PostgreSQL
def get_connection():
    return psycopg2.connect(st.secrets["postgres"]["conn_str"])

# ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Telegram
def send_telegram_message(message):
    token = st.secrets["telegram"]["token"]
    chat_id = st.secrets["telegram"]["chat_id"]
    url = f"https://api.telegram.org/bot{token}/sendMessage?chat_id={chat_id}&text={message}"
    requests.get(url)

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
def insert_job(data: dict):
    conn = get_connection()
    cur = conn.cursor()
    columns = ', '.join(data.keys())
    values = list(data.values())
    placeholders = ', '.join(['%s'] * len(values))
    sql = f"INSERT INTO job_tracking ({columns}) VALUES ({placeholders})"
    cur.execute(sql, values)
    conn.commit()
    cur.close()
    conn.close()

# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• WIP ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
@st.cache_data(ttl=60)
def get_jobs_by_status(status):
    conn = get_connection()
    df = pd.read_sql("SELECT * FROM job_tracking WHERE status = %s ORDER BY created_at DESC", conn, params=(status,))
    conn.close()
    return df

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ WOC
def update_status(woc_number, new_status):
    conn = get_connection()
    cur = conn.cursor()
    cur.execute("UPDATE job_tracking SET status = %s WHERE woc_number = %s", (new_status, woc_number))
    conn.commit()
    cur.close()
    conn.close()

# ‚úÖ Forming Mode
def forming_mode():
    st.header("Forming Mode")
    woc = st.text_input("WOC Number")
    part_name = st.text_input("Part Name")
    operator = st.text_input("Operator Name", value="‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏°‡∏™‡∏±‡∏ô‡∏ï‡πå")
    dept_to = st.selectbox("‡πÅ‡∏ú‡∏ô‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á", ["TP", "FI", "OS"])
    lot = st.text_input("Lot Number")
    total = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°", 0.0)
    barrel = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ñ‡∏±‡∏á", 0.0)
    sample_w = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏°", 0.0)
    sample_c = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á", 1)

    pieces = None
    if total and barrel and sample_w and sample_c:
        pieces = (total - barrel) / ((sample_w / sample_c) / 1000)
        st.metric("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô", f"{pieces:.2f}")

    if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        data = {
            "woc_number": woc,
            "part_name": part_name,
            "operator_name": operator,
            "dept_from": "FM",
            "dept_to": dept_to,
            "lot_number": lot,
            "total_weight": total,
            "barrel_weight": barrel,
            "sample_weight": sample_w,
            "sample_count": sample_c,
            "pieces_count": pieces,
            "status": "WIP-Forming"
        }
        insert_job(data)
        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        send_telegram_message(f"Forming ‡∏™‡πà‡∏á WOC {woc} ‡πÑ‡∏õ {dept_to}")

# ‚úÖ Tapping ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
def tapping_receive_mode():
    st.header("Tapping ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Forming")
    df = get_jobs_by_status("WIP-Forming")

    if df.empty:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Forming")
        return

    woc = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å WOC", df["woc_number"])
    job = df[df["woc_number"] == woc].iloc[0]

    st.write(f"Part: {job.part_name}, Lot: {job.lot_number}")
    st.write(f"‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏£‡∏ß‡∏°: {job.total_weight}, ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {job.sample_weight} / {job.sample_count}")
    st.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô: {job.pieces_count:.2f}")

    if st.button("‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô"):
        update_status(woc, "Tapping-Received")
        st.success(f"‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô WOC {woc} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        send_telegram_message(f"Tapping ‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô WOC {woc}")

# ‚úÖ Main app
def main():
    st.title("üì¶ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏á‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô Supabase")

    mode = st.sidebar.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏´‡∏°‡∏î", [
        "Forming Mode",
        "Tapping Receive Mode"
    ])

    if mode == "Forming Mode":
        forming_mode()
    elif mode == "Tapping Receive Mode":
        tapping_receive_mode()

if __name__ == "__main__":
    main()
