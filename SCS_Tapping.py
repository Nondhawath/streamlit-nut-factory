from datetime import datetime, timedelta
import pandas as pd
import streamlit as st
import gspread
from google.oauth2.service_account import Credentials
import requests
import json

# ‚úÖ Telegram Settings
TELEGRAM_TOKEN = "7617656983:AAGqI7jQvEtKZw_tD11cQneH57WvYWl9r_s"
TELEGRAM_CHAT_ID = "-4944715716"

def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": message, "parse_mode": "HTML"}
        requests.post(url, data=payload)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Telegram Error: {e}")

# ‚è∞ Timezone
def now_th():
    return datetime.utcnow() + timedelta(hours=7)

# üîê Google Sheet Auth
SCOPE = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
service_account_info = st.secrets["GOOGLE_SHEETS_CREDENTIALS"]  # ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
creds = Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
client = gspread.authorize(creds)

# üìó Sheets
sheet_id = "1GM-es30UBsqFCxBVQbBxht6IntIkL6troc5c2PWD3JA"  # ID ‡∏Ç‡∏≠‡∏á Google Sheets ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ
try:
    sheet = client.open_by_key(sheet_id)
    worksheet = sheet.worksheet("Data")
    st.success("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except gspread.exceptions.APIError as e:
    st.error(f"‚ö†Ô∏è Error accessing Google Sheets: {e}")
    st.stop()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
def check_and_create_columns():
    first_row = worksheet.row_values(1)  # ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
    if not first_row:  # ‡∏ñ‡πâ‡∏≤‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        columns = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", "‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", "Lot Number", 
                   "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG", "‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
        worksheet.append_row(columns)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
        st.success("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô Google Sheets ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

check_and_create_columns()  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

# üîÅ Load Master Data
def load_master_data():
    try:
        # Employee Data
        emp_data = sheet.worksheet("employee_master").get_all_values()  # ‡πÉ‡∏ä‡πâ get_all_values()
        emp_master = [row[0] for row in emp_data[1:]]  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ "‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
        emp_password_map = {row[0]: str(row[1]).strip() for row in emp_data[1:]}  # "‡∏£‡∏´‡∏±‡∏™" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 2
        emp_level_map = {row[0]: str(row[2]).strip() for row in emp_data[1:]}  # "‡∏£‡∏∞‡∏î‡∏±‡∏ö" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà 3
        
        # Part Data
        part_master = sheet.worksheet("part_code_master").col_values(1)[1:]

        # Reason Data
        reason_sheet = sheet.worksheet("Reason NG")
        reason_list = reason_sheet.col_values(reason_sheet.find("Reason").col)[1:]

        # Machines Data
        machines_data = sheet.worksheet("machines").get_all_values()  # ‡πÉ‡∏ä‡πâ get_all_values()
        machines_list = [row[0] for row in machines_data[1:]]  # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤ "machines_name" ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å

        return emp_master, emp_password_map, emp_level_map, part_master, reason_list, machines_list

    except Exception as e:
        st.error(f"‚ö†Ô∏è Error loading master data: {e}")
        return [], {}, {}, [], [], []

emp_master, emp_password_map, emp_level_map, part_master, reason_list, machines_list = load_master_data()

# üÜî ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
def generate_job_id():
    try:
        records = worksheet.get_all_values()  # ‡πÉ‡∏ä‡πâ get_all_values() ‡πÅ‡∏ó‡∏ô get_all_records()
        prefix = now_th().strftime("%y%m")
        filtered = [
            r for r in records
            if isinstance(r[1], str) and r[1].startswith(prefix) and r[1][-4:].isdigit()  # ‡πÉ‡∏ä‡πâ index ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        ]
        last_seq = max([int(r[1][-4:]) for r in filtered], default=0)
        return f"{prefix}{last_seq + 1:04d}"

    except gspread.exceptions.GSpreadException as e:
        st.error(f"‚ö†Ô∏è Gspread Error: {e}")
        return None

# üîê Login Process
if "logged_in_user" not in st.session_state:
    with st.form("login_form"):
        st.subheader("üîê ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
        username = st.selectbox("üë§ Username", emp_master)
        password = st.text_input("üîë Password", type="password")
        submitted = st.form_submit_button("üîì Login")
        if submitted:
            if emp_password_map.get(username) == password:
                st.session_state.logged_in_user = username
                st.session_state.user_level = emp_level_map.get(username, "")
                st.rerun()
            else:
                st.error("‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    st.stop()

user = st.session_state.logged_in_user
user_level = st.session_state.user_level
st.set_page_config(page_title="Taping Process", layout="wide")
st.title(f"üîß Taping Process - ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {user} ({user_level})")

# üîê ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
allowed_modes = []
if user_level == "S1":
    allowed_modes = ["üì• Taping MC", "üßæ Waiting Judgement", "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"]
elif user_level == "T1":
    allowed_modes = ["üßæ Waiting Judgement"]
elif user_level == "T7":
    allowed_modes = ["üì• Taping MC"]

menu = st.sidebar.selectbox("üìå ‡πÇ‡∏´‡∏°‡∏î", allowed_modes)

# üì• Taping MC
def check_duplicate(job_id, part_code, reason_ng):
    """ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô Google Sheets ‡πÇ‡∏î‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å Job ID, ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢ """
    records = worksheet.get_all_values()  # ‡πÉ‡∏ä‡πâ get_all_values() ‡πÅ‡∏ó‡∏ô get_all_records()
    for record in records:
        if len(record) > 8 and record[1] == job_id and record[3] == part_code and record[8] == reason_ng:
            return True  # ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥
    return False  # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥

if menu == "üì• Taping MC":
    st.subheader("üì• ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Taping")
    with st.form("taping_form"):
        job_id = generate_job_id()  # ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID ‡πÉ‡∏´‡∏°‡πà
        if job_id is None:
            st.error("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á Job ID ‡πÑ‡∏î‡πâ")
            st.stop()
        
        part_code = st.selectbox("üî© ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô", part_master)
        machine = st.selectbox("üõ† ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á", machines_list)
        lot = st.text_input("üì¶ Lot Number")
        checked = st.number_input("üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", 0)
        ng = st.number_input("‚ùå NG", 0)
        reason_ng = st.selectbox("üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢", reason_list)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        if check_duplicate(job_id, part_code, reason_ng):
            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        else:
            total = ng  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ NG ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à
            submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            if submitted:
                row = [
                    now_th().strftime("%Y-%m-%d %H:%M:%S"), job_id, user, part_code,
                    machine, lot, checked, ng, total,  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ NG ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à
                    "Taping MC", "", "", "", reason_ng
                ]
                try:
                    worksheet.append_row(row)  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà
                    st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    send_telegram_message(
                        f"üì• <b>New Taping</b>\n"
                        f"üÜî Job ID: <code>{job_id}</code>\n"
                        f"üë∑‚Äç‚ôÇÔ∏è ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô: {user}\n"
                        f"üî© ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {part_code}\n"
                        f"üõ† ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á: {machine}\n"
                        f"üì¶ Lot: {lot}\n"
                        f"‚ùå NG: {ng}\n"
                        f"üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢: {reason_ng}"
                    )
                except Exception as e:
                    st.error(f"‚ö†Ô∏è Error appending data to sheet: {e}")

# üßæ Waiting Judgement
elif menu == "üßæ Waiting Judgement":
    st.subheader("üîç ‡∏£‡∏≠‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à Scrap")
    try:
        df = pd.DataFrame(worksheet.get_all_values())  # ‡πÉ‡∏ä‡πâ get_all_values() ‡πÅ‡∏ó‡∏ô get_all_records()
        if df.empty:
            st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets")
            st.stop()
    except gspread.exceptions.GSpreadException as e:
        st.error(f"‚ö†Ô∏è Gspread Error: {e}")
        st.stop()

    df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
    df = df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Taping MC"]
    df = df.sort_values(by="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", ascending=False)

    for idx, row in df.iterrows():
        timestamp = row.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "")
        st.markdown(
            f"üÜî <b>{row['Job ID']}</b> | ‡∏£‡∏´‡∏±‡∏™: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']} | NG: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô NG']} | üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢: {row.get('‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢', '-')} | ‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {timestamp}",
            unsafe_allow_html=True
        )

        col1 = st.columns(1)
        if col1[0].button(f"üóë Scrap - {row['Job ID']}", key=f"scrap_{idx}"):
            worksheet.update_cell(idx + 2, 11, "Scrap")
            worksheet.update_cell(idx + 2, 12, now_th().strftime("%Y-%m-%d %H:%M:%S"))
            worksheet.update_cell(idx + 2, 14, user)
            send_telegram_message(
                f"üóë <b>Scrap</b>\n"
                f"üÜî Job ID: <code>{row['Job ID']}</code>\n"
                f"üî© ‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô: {row['‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô']}\n"
                f"üìã ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢: {row['‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏µ‡∏¢']}\n"
                f"‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {row['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î']}\n"
                f"üë∑‚Äç‚ôÇÔ∏è ‡πÇ‡∏î‡∏¢: {user}"
            )
            st.rerun()

# üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
elif menu == "üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô":
    df = pd.DataFrame(worksheet.get_all_values())  # ‡πÉ‡∏ä‡πâ get_all_values() ‡πÅ‡∏ó‡∏ô get_all_records()
    df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] = pd.to_datetime(df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"], errors="coerce")
    view = st.selectbox("üóì ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô", "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå", "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô", "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ"])
    now = now_th()
    if view == "‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô":
        df = df[df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.date == now.date()]
    elif view == "‡∏£‡∏≤‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå":
        df = df[df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"] >= now - pd.Timedelta(days=7)]
    elif view == "‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô":
        df = df[df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.month == now.month]
    elif view == "‡∏£‡∏≤‡∏¢‡∏õ‡∏µ":
        df = df[df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"].dt.year == now.year]
    st.dataframe(df)
    scrap_sum = df[df["‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"] == "Scrap"].groupby("‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô")["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"].sum().reset_index()
    st.markdown("üìå ‡∏™‡∏£‡∏∏‡∏õ Scrap ‡πÅ‡∏¢‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏á‡∏≤‡∏ô")
    st.dataframe(scrap_sum)
