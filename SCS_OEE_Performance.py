import streamlit as st
import pandas as pd
from datetime import datetime

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
st.title("Manufacturing Job Assignment System")
st.markdown("Welcome to the job assignment system. Please input the job details, assign it to a machine, and track the utilization.")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
machines_data = pd.DataFrame({
    "machines_name": ["Machine A", "Machine B", "Machine C", "Machine D"],
    "status": ["Idle", "Running", "Idle", "Running"]
})

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏î‡∏µ
st.subheader("Available Machines")
st.write("Below are the available machines:")
st.dataframe(machines_data.style.highlight_max(axis=0))  # Highlight max values for better UX

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
st.subheader("Upload Job Plan")

# ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
job_name = st.text_input("Job Name", placeholder="Enter the job name")
quantity = st.number_input("Quantity", min_value=1, step=1, placeholder="Enter the quantity")
delivery_date = st.date_input("Delivery Date", min_value=datetime.today())

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
st.markdown("### Job Information")
st.markdown("Fill in the job details and click `Upload Plan` to add it to the job list.")

# ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á DataFrame
if st.button("Upload Plan"):
    plan_data = {
        'Job Name': job_name,
        'Quantity': quantity,
        'Delivery Date': str(delivery_date)
    }
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô
    plan_df = pd.DataFrame([plan_data])

    # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    st.markdown("### Uploaded Plan")
    st.write(plan_df)
    st.success("Plan uploaded successfully!", icon="‚úÖ")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
st.subheader("Assign Job to Machine")
selected_machine = st.selectbox("Select Machine", machines_data['machines_name'])

# ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
if selected_machine:
    st.write(f"Job will be assigned to: **{selected_machine}**")
    st.markdown("### Set Start and End Time for the Job")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ Start ‡πÅ‡∏•‡∏∞ End ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    start_time = st.time_input("Start Time", datetime(2025, 6, 9, 8, 0))
    end_time = st.time_input("End Time", datetime(2025, 6, 9, 16, 0))

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    if end_time > start_time:
        duration = (datetime.combine(datetime.today(), end_time) - datetime.combine(datetime.today(), start_time)).seconds / 3600
    else:
        duration = 0

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏° Start ‡πÅ‡∏•‡∏∞ End
    if st.button("Start Job"):
        st.write(f"Job started at {start_time}, duration: {duration} hours", icon="üïí")

    if st.button("End Job"):
        st.write(f"Job ended at {end_time}, duration: {duration} hours", icon="‚èπÔ∏è")

    # ‡πÅ‡∏™‡∏î‡∏á % Utilization ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
    total_available_time = 8  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô
    assignments = [
        {'machine': selected_machine, 'job': job_name, 'start_time': start_time, 'end_time': end_time, 'duration': duration}
    ]
    total_active_time = sum([assignment['duration'] for assignment in assignments])
    utilization = (total_active_time / total_available_time) * 100

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• % Utilization ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏£‡∏≤‡∏ü
    st.markdown("### Machine Utilization")
    st.progress(int(utilization))  # ‡πÉ‡∏ä‡πâ progress bar ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢

    st.write(f"Machine Utilization: {utilization:.2f}%")
