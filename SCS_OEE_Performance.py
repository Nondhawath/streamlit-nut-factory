import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 20 ‡∏á‡∏≤‡∏ô) ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°
job_names = [f"Job {i}" for i in range(1, 51)]  # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏á‡∏≤‡∏ô
quantities = np.random.randint(10000, 100000, size=len(job_names))  # ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏°‡∏∑‡πà‡∏ô‡∏ñ‡∏∂‡∏á‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏™‡∏ô

# ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏á‡∏≤‡∏ô
jobs_data = pd.DataFrame({
    "Job Name": job_names,
    "Quantity": quantities,
    "Delivery Date": pd.date_range(start=datetime.today(), periods=len(job_names), freq='D')
})

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Dashboard
st.title("Manufacturing Job Dashboard")
st.markdown("Welcome to the Job Dashboard. Select a job to assign it to a machine and track utilization.")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
st.subheader("Available Jobs")
st.write("Below are the available jobs with quantity and delivery date:")
st.dataframe(jobs_data.style.highlight_max(axis=0))  # ‡πÉ‡∏ä‡πâ style ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå

# ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
st.subheader("Assign Job to Machine")
selected_job = st.selectbox("Select Job", jobs_data['Job Name'])

# ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
if selected_job:
    job_details = jobs_data[jobs_data['Job Name'] == selected_job].iloc[0]
    st.write(f"**Job Name**: {job_details['Job Name']}")
    st.write(f"**Quantity**: {job_details['Quantity']}")
    st.write(f"**Delivery Date**: {job_details['Delivery Date']}")

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏ï‡πà‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏á‡∏≤‡∏ô
    selected_machine = st.selectbox("Select Machine", ["Machine A", "Machine B", "Machine C", "Machine D"])

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    st.markdown("### Set Start and End Time for the Job")
    start_time = st.time_input("Start Time", datetime(2025, 6, 9, 8, 0))
    end_time = st.time_input("End Time", datetime(2025, 6, 9, 16, 0))

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    if end_time > start_time:
        duration = (datetime.combine(datetime.today(), end_time) - datetime.combine(datetime.today(), start_time)).seconds / 3600
    else:
        duration = 0

    if st.button("Start Job"):
        st.write(f"Job started at {start_time}, duration: {duration} hours", icon="üïí")

    if st.button("End Job"):
        st.write(f"Job ended at {end_time}, duration: {duration} hours", icon="‚èπÔ∏è")

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % Utilization ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
    total_available_time = 8  # ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô 1 ‡∏ß‡∏±‡∏ô
    total_active_time = duration  # ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    utilization = (total_active_time / total_available_time) * 100

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• % Utilization ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏£‡∏≤‡∏ü
    st.markdown("### Machine Utilization")
    st.progress(int(utilization))  # ‡πÉ‡∏ä‡πâ progress bar ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏á‡πà‡∏≤‡∏¢

    st.write(f"Machine Utilization: {utilization:.2f}%")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.pie([utilization, 100-utilization], labels=["Utilized", "Idle"], autopct='%1.1f%%', colors=["#4CAF50", "#FFC107"])
    ax.set_title(f"Utilization of {selected_machine}")
    st.pyplot(fig)
