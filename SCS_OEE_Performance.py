import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
from datetime import date
import altair as alt
from io import BytesIO

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
scope = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
credentials = Credentials.from_service_account_info(st.secrets["gcp_service_account"], scopes=scope)
client = gspread.authorize(credentials)
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1gIBZmGn86zzJWECO7Kzy5c0ibOdN1N_3Ys58M80b0kk")

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
machines_df = pd.DataFrame(sheet.worksheet("Machines").get_all_records())
employees_df = pd.DataFrame(sheet.worksheet("Employees").get_all_records())
breakdowns_df = pd.DataFrame(sheet.worksheet("Breakdowns").get_all_records())
oee_log_df = pd.DataFrame(sheet.worksheet("OEE_Log").get_all_records())

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì OEE
def calculate_oee(df):
    df["Availability"] = df["Runtime"] / (df["Runtime"] + df["Downtime"])
    df["Performance"] = df["Runtime"] / (df["TotalProduced"].replace(0, 1))
    df["Quality"] = (df["TotalProduced"] - df["Defects"]) / df["TotalProduced"].replace(0, 1)
    df["OEE"] = df["Availability"] * df["Performance"] * df["Quality"]
    return df

# UI
st.title("SCS OEE Performance")

tab1, tab2, tab3 = st.tabs(["üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å OEE", "üìà Dashboard", "üì§ Export"])

# Tab 1: ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
with tab1:
    with st.form("log_oee_form"):
        col1, col2 = st.columns(2)
        with col1:
            log_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", value=date.today())
            shift = st.selectbox("‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", [1, 2, 3])
            machine_id = st.selectbox("‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£", machines_df["MachineID"])
        with col2:
            employee_id = st.selectbox("‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô", employees_df["EmployeeID"])
            runtime = st.number_input("Runtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0)
            downtime = st.number_input("Downtime (‡∏ô‡∏≤‡∏ó‡∏µ)", min_value=0)
            defects = st.number_input("Defects (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)", min_value=0)
            total_produced = st.number_input("Total Produced (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)", min_value=0)

        submitted = st.form_submit_button("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

        if submitted:
            oee_sheet = sheet.worksheet("OEE_Log")
            new_row = [str(log_date), shift, machine_id, employee_id, runtime, downtime, defects, total_produced]
            oee_sheet.append_row(new_row)
            st.success("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")

# Tab 2: Dashboard ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
with tab2:
    if not oee_log_df.empty:
        df = oee_log_df.copy()
        numeric_cols = ["Runtime", "Downtime", "Defects", "TotalProduced"]
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors="coerce").fillna(0)
        df = calculate_oee(df)

        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å
        df = df.merge(machines_df[["MachineID", "Department"]], on="MachineID", how="left")

        department = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å", options=["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + sorted(df["Department"].dropna().unique().tolist()))
        if department != "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            df = df[df["Department"] == department]

        st.dataframe(df[["Date", "Department", "MachineID", "Availability", "Performance", "Quality", "OEE"]])

        avg_oee = df["OEE"].mean() * 100
        st.metric("üìä ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ OEE", f"{avg_oee:.2f}%")

        # ‡∏Å‡∏£‡∏≤‡∏ü
        df["Date"] = pd.to_datetime(df["Date"])
        chart = alt.Chart(df).mark_line(point=True).encode(
            x="Date:T",
            y=alt.Y("OEE:Q", title="OEE"),
            color="MachineID:N",
            tooltip=["Date", "MachineID", "OEE"]
        ).properties(width=700, height=400, title="üìà OEE ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

        st.altair_chart(chart, use_container_width=True)
    else:
        st.warning("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô OEE_Log")

# Tab 3: Export Excel
with tab3:
    if not oee_log_df.empty:
        df = oee_log_df.copy()
        numeric_cols = ["Runtime", "Downtime", "Defects", "TotalProduced"]
        df[numeric_cols] = df[numeric_cols].apply(pd.to_numeric, errors="coerce").fillna(0)
        df = calculate_oee(df)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Excel
        towrite = BytesIO()
        with pd.ExcelWriter(towrite, engine='xlsxwriter') as writer:
            df.to_excel(writer, index=False, sheet_name='OEE_Report')

        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô OEE (Excel)",
            data=towrite.getvalue(),
            file_name="OEE_Report.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
